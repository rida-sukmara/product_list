// Mocks generated by Mockito 5.0.17 from annotations
// in product_list/test/domain/usecases/get_all_product_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:product_list/core/error/failure.dart' as _i5;
import 'package:product_list/data/models/product.dart' as _i6;
import 'package:product_list/domain/repositories/i_product_repository.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [IProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProductRepository extends _i1.Mock
    implements _i3.IProductRepository {
  MockIProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Product>>> all() =>
      (super.noSuchMethod(Invocation.method(#all, []),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Product>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.Product>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.Product>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Product>> findBy({String? id}) =>
      (super.noSuchMethod(Invocation.method(#findBy, [], {#id: id}),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Product>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Product>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Product>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addToWish({_i6.Product? product}) =>
      (super.noSuchMethod(
              Invocation.method(#addToWish, [], {#product: product}),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> removeFromWish(
          {_i6.Product? product}) =>
      (super.noSuchMethod(
              Invocation.method(#removeFromWish, [], {#product: product}),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
